AWSTemplateFormatVersion: "2010-09-09"
Description: creating a lambda function for automating the s3 lifecycle policy and the lambda role

Parameters:
  Team:
    Type: String
    Description: the name of the team

  TeamEmail:
    Type: String
    Description: team e-mail address

  Env:
    Type: String
    Default: dev
    Description: Environment the resources/ stack is deployed to
    AllowedValues:
      - "dev"
      - "sit"
      - "prod"

Resources:
  BoundedLambdaS3LifeCycleRole: #creation of lambda function role
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "Bounded-Lambda-S3-Life-cycle-role"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/BoundedPermissionsPolicy"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/bounded/"
      Policies:
        - PolicyName: "Lambda-S3-lifecycle-role-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                 - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::lambda-function-${AWS::AccountId}-life-cycle-policy-zipfile-${Env}/*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:ListBucketVersions"
                  - "s3:ListAllMyBuckets"
                  - "s3:GetBucketVersioning"
                  - "s3:GetLifecycleConfiguration"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutBucketVersioning"
                  - "s3:PutBucketNotification"
                  - "s3:PutLifecycleConfiguration"
                Resource: !Sub "arn:aws:s3:::*"
              - Effect: Allow
                Action:
                  - "sns:*"
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:SNS_Notification_for_S3Lifecycle_and_versioning"
      
  
  #creation of lambda function
  LambdaS3LifeCycleFunction:
     Type: AWS::Lambda::Function
     Properties:
        FunctionName: Lambda-S3-LifeCycle-Function
        Role: !GetAtt "BoundedLambdaS3LifeCycleRole.Arn"
        Runtime: python3.9
        Handler: s3-lifecycle-lambda.lambda_handler
        Timeout: 60
        Description: A Lambda function that will implement s3 life cycle policy on each bucket
        MemorySize: 160
        Code: #getting the lambda python file code from the specified bucket
      
          S3Bucket: !Sub lambda-function-${AWS::AccountId}-life-cycle-policy-zipfile-${Env}
          S3Key: s3-lifecycle-lambda.zip
        Tags:
          - Key: GroupName
            Value: 'SGB-DevOps'
          - Key: Environment
            Value: !Ref Env
          - Key: Team-Email
            Value: 'example@example.onmicrosoft.com'
          - Key: Tier
            Value: 'MCA'
  
  #creation of lambda function log group
  LambdaFunctionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref LambdaS3LifeCycleFunction]]    
      Tags:
        - Key: GroupName
          Value: 'SGB-DevOps'
        - Key: Environment
          Value: !Ref Env
        - Key: Team-Email
          Value: 'example@example.onmicrosoft.com'
        - Key: Tier
          Value: 'MCA'   

  #creation of a rule to trigger the lambda function
  ScheduledEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule/ event to trigger the lambda function
      Name: lambda-s3-lifecycle-event-rule-trigger
      EventPattern:
        source:
         - "aws.s3"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
           - "CreateBucket"
      State: ENABLED
      Targets: 
       - Arn: !GetAtt LambdaS3LifeCycleFunction.Arn
         Id: !Ref "LambdaS3LifeCycleFunction"
          
  # creating a role that will be assumed by event scheduler after 1 week to trigger lambda function
  BoundedScheduleRole: #creation of lambda function role
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "Bounded-Schedule-trigger-for-Lambda-Lifecycle-policy"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/BoundedPermissionsPolicy"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/bounded/"
      Policies:
        - PolicyName: "Schedule-trigger-for-Lambda-s3-lifecycle-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                 - "lambda:InvokeFunction"
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Lambda-S3-LifeCycle-Function"

  MyRateLimitedRule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: the Lambda function to be triggered once every week
      ScheduleExpression: "cron(10 8 ? * tue *)"
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 20
        Mode: FLEXIBLE
      State: ENABLED
      Target:
        Arn: !GetAtt LambdaS3LifeCycleFunction.Arn
        RoleArn: !GetAtt BoundedScheduleRole.Arn
      
 
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaS3LifeCycleFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledEventRule.Arn
  
  PermissionForScheduleToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaS3LifeCycleFunction
      Action: lambda:InvokeFunction
      Principal: scheduler.amazonaws.com
      SourceArn: !GetAtt MyRateLimitedRule.Arn
  
         